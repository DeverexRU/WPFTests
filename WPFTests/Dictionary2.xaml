<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <Style x:Key="PurpleButton">
        <!--обычная кнопка. Проба стилей-->
        <Setter Property="Control.FontFamily" Value="Verdana" />
        <Setter Property="Control.Background" Value="#FFD3B2F3" />
        <Setter Property="Control.Foreground" Value="Black" />
        <!--<Setter Property="Control.Margin" Value="15" />-->
    </Style>
    <Style x:Key="ButtonFlatStyle1" TargetType="{x:Type Button}">
        <!--плоский стиль. не используется-->
        <Setter Property="Control.Background" Value="Yellow" />
        <Setter Property="Control.BorderBrush" Value="LightCoral" />
        <!--<Setter Property="Control.Margin" Value="15" />-->
        <Setter Property="Control.FontFamily" Value="Verdana" />
        <Style.Triggers>
            <Trigger Property="Control.IsMouseOver" Value="True">
                <Setter Property="Control.Background" Value="LightYellow" />
                <Setter Property="Control.BorderBrush" Value="LightCoral" />
                <Setter Property="Control.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="Control.IsFocused" Value="True">
                <Setter Property="Control.FontWeight" Value="Bold" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonFlatStyle3" TargetType="{x:Type Button}">
        <!--плоский стиль. используется!-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="#ccc" BorderThickness="1" BorderBrush="#7a7a7a">
                        <!--#009688-->
                        <ContentPresenter x:Name="cp" TextBlock.Foreground="black" Content="{TemplateBinding Content}" TextBlock.FontSize="10" Margin="2" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"></ContentPresenter>
                        <!--<Viewbox>
                                <ContentPresenter x:Name="cp" TextBlock.Foreground="black" TextBlock.FontSize="10" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>-->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#e2e2e2"></Setter>
                            <!--d6d6d6-->
                            <Setter TargetName="cp" Property="TextBlock.Foreground" Value="#6b6b6b"></Setter>
                            <!--424242-->
                            <!--#E0F2F1
                                <Setter TargetName="cp" Property="TextBlock.Foreground" Value="#7B1FA2"></Setter>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="WhiteSmoke"></Setter>
                            <!--#00695C-->
                            <Setter TargetName="border" Property="BorderBrush" Value="#26a0da"></Setter>
                            <Setter TargetName="cp" Property="TextBlock.Foreground" Value="black"></Setter>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#ccc"></Setter>
                            <Setter TargetName="cp" Property="TextBlock.Foreground" Value="black"></Setter>
                            <Setter TargetName="border" Property="BorderBrush" Value="black"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="flatTextBox" TargetType="{x:Type TextBox}">
        <!--плоский стиль. используется!-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border"  Padding="1" Background="WhiteSmoke" BorderBrush="#7a7a7a" BorderThickness="1">
                        <!--<ContentPresenter x:Name="cp" Height="15"></ContentPresenter>-->
                        <ScrollViewer VerticalAlignment="Center" Margin="1" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#26a0da"></Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>

            <Border Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
            <Path Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Black"/>
        </Grid>
    </ControlTemplate>
    <Style TargetType="ComboBox">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="#cfcfcf"/>
        <Setter Property="BorderBrush" Value="#7a7a7a"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>

                        <ToggleButton
                        Grid.ColumnSpan="2"
                        ClickMode="Press"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Template="{StaticResource ComboBoxToggleButtonTemplate}"
                        IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                        <ContentPresenter 
                        Margin="5, 3, 0, 3"
                        IsHitTestVisible="False"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"         
                        Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                        <Popup AllowsTransparency="True" PopupAnimation="Slide" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}">
                            <Grid MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Background="WhiteSmoke" BorderBrush="#26a0da" BorderThickness="1"/>
                                <ScrollViewer Margin="1,1,1,1">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="WhiteSmoke"/>
                            <Setter Property="BorderBrush" Value="#26a0da"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="TextBoxFlatStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Template" >
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Margin="10,0">
                                <TextBlock x:Name="watermark" VerticalAlignment="Center" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}" Opacity="0.4" Text="{TemplateBinding Tag}"></TextBlock>
                                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center"></ScrollViewer>
                                <Rectangle x:Name="rect" Fill="Transparent" Height="2" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" Margin="0,3"></Rectangle>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="GotFocus">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Width" AutoReverse="True" From="150" To="152" Duration="0:0:0.15" >
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase ></CubicEase>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Height" AutoReverse="True" From="30" To="32" Duration="0:0:0.15" >
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase ></CubicEase>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter TargetName="rect" Property="Fill" Value="{Binding ElementName=border, Path=BorderBrush}"></Setter>
                            </Trigger>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="watermark" Property="Visibility" Value="Visible"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
    <!--<Color x:Key="detailMark">#FFA1A9B3</Color>
        <SolidColorBrush x:Key="detailMarkBrush" Color="{StaticResource ResourceKey=detailMark}" />
        <Style x:Key="flatTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Rectangle Stroke="{StaticResource ResourceKey=detailMarkBrush}" StrokeThickness="1"/>
                            <TextBox Margin="1" Text="{TemplateBinding Text}" BorderThickness="0"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
    <!--<Style TargetType="{x:Type TextBox}" x:Key="XNumericBoxLiteStyle" BasedOn="{x:Null}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="txb_border"  
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="ToolTip"
                                    Value="{Binding RelativeSource={RelativeSource Self},
                                        Path=(Validation.Errors)[0].ErrorContent}" />
                                <Setter Property="Foreground" Value="Red" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="txb_border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="txb_border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="txb_border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>-->
</ResourceDictionary>